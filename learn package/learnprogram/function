# -*- coding: utf-8 -*-
# 装饰器
'decorator test'
# import time,functools
# def metric(fn):
#     @functools.wraps(fn)
#     def wrapper(*args,**kw):
#         print ('%s execued in %s ms'%(fn.name))
#         return fu(*args,**kw)
#     return wrapper
#
# @metric
# def fast(x, y):
#     time.sleep(0.0012)
#     return x + y;
#
# @metric
# def slow(x, y, z):
#     time.sleep(0.1234)
#     return x * y * z;
#
# f = fast(11, 22)
# s = slow(11, 22, 33)
# if f != 33:
#     print('测试失败!')
# elif s != 7986:
#     print('测试失败!')


# def log(func):
#     @functools.wraps(func)
#     def wrapper(*args,**kw):
#         print 'call %s():'%func.__name__
#         return func(*args,**kw)
#     return wrapper
# @log
# def now():
#     print '2015-3-25'

import time,functools
def metric(func):
    @functools.wraps(func)
    def wrappers(*args,**kw):
        localtime = time.asctime( time.localtime(time.time()) )
        print '%s executed in %s  '%(func.__name__,localtime)
        return func(*args,**kw)
    return wrappers

@metric
def now():
    print 'hehe'






